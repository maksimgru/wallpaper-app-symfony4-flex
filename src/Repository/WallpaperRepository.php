<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;

/**
 * WallpaperRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WallpaperRepository extends EntityRepository
{
    /**
     * This is Description of findOneImageBy
     *
     * @param array $options
     *
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function findOneImageBy(array $options=[])
    {
        $options['slug'] = array_key_exists('slug', $options) ? $options['slug'] : '';

        $dql = 'SELECT img, cat FROM App:Wallpaper img
             LEFT JOIN img.category cat
             WHERE (img.category = cat.id OR img.category IS NULL) AND img.slug = :slug ';

        $result = $this->getEntityManager()
            ->createQuery($dql)
            ->setParameter('slug', $options['slug'])
            ->getOneOrNullResult();

        return $result;
    }

    /**
     * This is Description of findAllImagesOrderBySlug
     *
     * @param array $options
     *
     * @return mixed
     */
    public function findAllImagesOrderBySlug(array $options=[])
    {
        $options['order'] = array_key_exists('order', $options) ? $options['order'] : 'ASC';

        $dql = 'SELECT img, cat FROM App:Wallpaper img
             LEFT JOIN img.category cat
             WHERE img.category = cat.id OR img.category IS NULL
             ORDER BY img.slug ' . $options['order'];

        $result = $this->getEntityManager()
            ->createQuery($dql)
            ->getResult();

        return $result;
    }

    /**
     * This is Description of findImagesByCategorySlug
     *
     * @param array $options
     *
     * @return mixed
     */
    public function findImagesByCategorySlug(array $options=[])
    {
        $options['cat_slug'] = (array_key_exists('cat_slug', $options) && 'uncategorized' !== $options['cat_slug']) ? $options['cat_slug'] : '';
        $options['order'] = array_key_exists('order', $options) ? $options['order'] : 'ASC';

        if ($options['cat_slug']) {

            $dql = 'SELECT img, cat FROM App:Wallpaper img
                LEFT JOIN img.category cat
                WHERE img.category = cat.id AND cat.cslug = :cslug
                ORDER BY img.slug ' . $options['order'];

            $result = $this->getEntityManager()
                ->createQuery($dql)
                ->setParameter('cslug', $options['cat_slug'])
                ->getResult();

        } else {

            $dql = 'SELECT img FROM App:Wallpaper img
                WHERE img.category IS NULL
                ORDER BY img.slug ' . $options['order'];

            $result = $this->getEntityManager()
                ->createQuery($dql)
                ->getResult();

        }

        return $result;
    }

    /**
     * This is Description of findTopImages
     *
     * @param array $options
     *
     * @return mixed
     */
    public function findLatestImages($options)
    {
        $options['number'] = array_key_exists('number', $options) ? (int)$options['number'] : 2;
        $options['order'] = array_key_exists('order', $options) ? $options['order'] : 'DESC';

        $dql = 'SELECT img, cat FROM App:Wallpaper img
            LEFT JOIN img.category cat
            WHERE img.category = cat.id OR img.category IS NULL
            ORDER BY img.updatedAt ' . $options['order'];

        $result = $this->getEntityManager()
            ->createQuery($dql)
            ->setMaxResults($options['number'])
            ->getResult();

        return $result;
    }

    /**
     * This is Description of findRandomImages
     *
     * @param array $options
     *
     * @return mixed
     */
    public function findRandomImages($options)
    {
        $options['number'] = array_key_exists('number', $options) ? (int)$options['number'] : 8;

        $idsRows = $this->getEntityManager()
            ->createQuery(
                'SELECT img.id FROM App:Wallpaper img'
            )
            ->getResult();

        $ids = array_map(function ($row) {return $row['id'];}, $idsRows);

        $options['number'] = $options['number'] <= count($ids) ? $options['number'] : count($ids);

        $idsKeys = array_rand($ids, $options['number']);

        $idsParams = '(?' . implode(', ?', array_values($idsKeys)) . ')';

        $idsRandom = [];

        foreach ($idsKeys as $idsKey) {
            $idsRandom[$idsKey] = $ids[$idsKey];
        }

        $dql = 'SELECT img, cat FROM App:Wallpaper img
            LEFT JOIN img.category cat
            WHERE (img.category = cat.id OR img.category IS NULL) AND img.id IN ' . $idsParams;

        $result = $this->getEntityManager()
            ->createQuery($dql)
            ->setParameters($idsRandom)
            ->getResult();

        return $result;
    }

}
